# num=(input())
# try:
#     for i in range(11):
#         print(f"{int(num)}x{i+1}={int(num)*(i+1)}")
#     l=[1,2,3,4,5]
#     print(l[int(num)])
# except ValueError:
#     print("Value entered is not a integer")
#     # print(e)
# except IndexError:
#     print("Index out of range...")
# finally:
#     print("This line will always be executed")

# # However,we can also do write the code like below written for the same output here,the question arises that then what is the use of finally keyword where instead we can do the same as below:
# try:
#     for i in range(11):
#         print(f"{int(num)}x{i+1}={int(num)*(i+1)}")
#     l=[1,2,3,4,5]
#     print(l[int(num)])
# except ValueError:
#     print("Value entered is not a integer")
#     # print(e)
# except IndexError:
#     print("Index out of range...")
# print("This line will always be executed")

# The use of finally is important in a fucntion that returns a value
def fun():
    num=(input())
    try:
        for i in range(10):
            print(f"{int(num)}x{i+1}={int(num)*(i+1)}")
        l=[1,2,3,4,5]
        print(l[int(num)])
        return 1
    except ValueError:
        print("Value entered is not a integer")
        return 0
    except IndexError:
        print("Index out of range...")
        return -1
    finally:
        print("This line will always be executed")
x=fun()
print(x)
# If the above function is written without the finally keyword ,then the last statement will not be executed..... 
